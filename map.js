import { createClient } from "@supabase/supabase-js";
import L from "leaflet";

// ðŸ”¹ Koneksi ke Supabase
const supabase = createClient(
Â  "https://pmrcirhnptduntmobmrq.supabase.co",
Â  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBtcmNpcmhucHRkdW50bW9ibXJxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxNjUyOTIsImV4cCI6MjA3NTc0MTI5Mn0.U84lEIAMGeETYuysTleWXI3f_WUi-2koT5yvkc5RPZk"
);

// ðŸ”¹ Batas koordinat peta
const Sw = L.latLng(-1.004896265670877, 119.79566929941795);
const Ne = L.latLng(-0.738935319559621, 119.93359106677627);
const bounds = L.latLngBounds(Sw, Ne);

// ðŸ”¹ Variabel global map
let map;
const myIcon = L.icon({
Â  iconUrl: "../FOTO/LOCATION.png",
Â  iconSize: [40, 50],
Â  iconAnchor: [20, 40],
Â  popupAnchor: [0, -40],
});

// ðŸ”¹ Inisialisasi peta
function addMap() {
Â  map = L.map("map", {
Â  Â  maxBounds: bounds,
Â  Â  maxBoundsViscosity: 1.0,
Â  Â  minZoom: 13,
Â  Â  center: [-0.9002633930253064, 119.87806390327438],
Â  Â  zoom: 13,
Â  });

Â  L.tileLayer("https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png", {
Â  Â  attribution:
Â  Â  Â  '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
Â  }).addTo(map);
}

// ðŸ”¹ Ambil semua marker awal (semua toko)
async function loadMarkers() {
Â const { data, error } = await supabase
Â  .from("toko")
Â  .select(`
Â  Â  id_toko,
Â  Â  nama_toko,
Â  Â  alamat,
Â  Â  latitude,
Â  Â  longtitude, 
    toko_brand ( 
Â  Â  Â  brand (
Â  Â  Â  Â  id_brand,
Â  Â  Â  Â  nama_brand,
Â  Â  Â  Â  jenis_brand
Â  Â  Â  )
Â  Â  )
Â  `);


Â  if (error) {
Â  Â  console.error("Gagal ambil data:", error);
Â  Â  alert("Error: " + JSON.stringify(error, null, 2));
Â  Â  return;
Â  }

Â  console.log("Data dari Supabase (Semua Toko):", data);

Â  data.forEach((toko) => {
Â  Â  const marker = L.marker([toko.latitude, toko.longtitude], { icon: myIcon }).addTo(map);

Â  Â  const brandList =
Â  Â  Â  toko.toko_brand?.map((b) => `${b.brand.nama_brand} (${b.brand.jenis_brand})`).join(", ") ||
Â  Â  Â  "Tidak ada brand";

Â  Â  const popupContent = `
Â  Â  Â  <b>${toko.nama_toko}</b><br>
Â  Â  Â  ${toko.alamat}<br>
Â  Â  Â  <i>Brand: ${brandList}</i>
Â  Â  `; // Menghapus tag <img>
Â  Â  marker.bindPopup(popupContent);
Â  });
}
// ------------------------------------------------------------------

// ðŸ”¹ Ambil daftar brand dan isi dropdown
async function initBrandDropdown() {
Â  const { data: brands, error } = await supabase
Â  Â  .from("brand")
Â  Â  .select("id_brand, nama_brand");

Â  if (error) {
Â  Â  console.error("Gagal ambil data brand:", error);
Â  Â  return;
Â  }

Â  const dropdownMenu = document.querySelector(".dropdown-menu");
Â  dropdownMenu.innerHTML = "";

Â  // Tambahkan opsi "Tampilkan Semua"
Â  const liAll = document.createElement("li");
Â  const aAll = document.createElement("a");
Â  aAll.classList.add("dropdown-item", "fw-bold");
Â  aAll.textContent = "Tampilkan Semua Toko";
Â  aAll.href = "#";
Â  aAll.dataset.idBrand = "all";
Â  liAll.appendChild(aAll);
Â  dropdownMenu.appendChild(liAll);
Â  dropdownMenu.appendChild(document.createElement("hr")); // Pemisah

Â  brands.forEach((brand) => {
Â  Â  const li = document.createElement("li");
Â  Â  const a = document.createElement("a");
Â  Â  a.classList.add("dropdown-item");
Â  Â  a.textContent = brand.nama_brand;
Â  Â  a.href = "#";
Â  Â  a.dataset.idBrand = brand.id_brand; // id_brand diset sebagai string
Â  Â  li.appendChild(a);
Â  Â  dropdownMenu.appendChild(li);
Â  });

Â  // event listener klik brand (Perbaikan di sini menggunakan parseInt)
Â  dropdownMenu.querySelectorAll(".dropdown-item").forEach((item) => {
Â  Â  item.addEventListener("click", async (e) => {
Â  Â  Â  e.preventDefault();
Â  Â  Â  const idBrandString = e.target.dataset.idBrand; // String dari HTML

Â  Â  Â  if (idBrandString === "all") {
Â  Â  Â  Â  // Jika memilih "Tampilkan Semua"
Â  Â  Â  Â  await clearMarkers();
Â  Â  Â  Â  await loadMarkers();
Â  Â  Â  } else {
Â  Â  Â  Â  // Konversi string ke integer sebelum memanggil fungsi filter
Â  Â  Â  Â  const idBrand = parseInt(idBrandString); 
Â  Â  Â  Â  if (!isNaN(idBrand)) {
Â  Â  Â  Â  Â  await loadTokoByBrand(idBrand);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  console.error("ID Brand tidak valid:", idBrandString);
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  });
Â  });
}

// Fungsi untuk menghapus semua marker dari peta
async function clearMarkers() {
Â  map.eachLayer((layer) => {
Â  Â  if (layer instanceof L.Marker) {
Â  Â  Â  map.removeLayer(layer);
Â  Â  }
Â  });
}


// ðŸ”¹ Ambil toko berdasarkan id_brand (Kode Fiks dengan filter .eq() dan join)
async function loadTokoByBrand(idBrand) {
Â  await clearMarkers();

Â  console.log("Mencari toko untuk Brand ID (Integer):", idBrand); // Pastikan ini adalah angka

Â  const { data, error } = await supabase
Â  Â  .from("toko")
Â  Â  .select(`
Â  Â  Â  id_toko,
Â  Â  Â  nama_toko,
Â  Â  Â  alamat,
Â  Â  Â  latitude,
Â  Â  Â  longtitude, 
Â  Â  Â  toko_brand!inner ( 
Â  Â  Â  Â  brand (
Â  Â  Â  Â  Â  id_brand,
Â  Â  Â  Â  Â  nama_brand,
Â  Â  Â  Â  Â  jenis_brand
Â  Â  Â  Â  )
Â  Â  Â  )
Â  Â  `)
Â  Â  // Filter di tabel penghubung menggunakan ID yang sudah di-parse ke integer
Â  Â  .eq("toko_brand.id_brand", idBrand); 

Â  if (error) {
Â  Â  console.error("Gagal ambil data toko berdasarkan brand:", error);
Â  Â  alert("Error: " + JSON.stringify(error, null, 2));
Â  Â  return;
Â  }

Â  console.log("Data Toko Ditemukan untuk filter:", data); 

Â  if (!data || data.length === 0) {
Â  Â  alert("Tidak ada toko yang menjual brand ini");
Â  Â  return;
Â  }

Â  data.forEach((toko) => {
Â  Â  const marker = L.marker([toko.latitude, toko.longtitude], { icon: myIcon }).addTo(map);

Â  Â  const brandList =
Â  Â  Â  toko.toko_brand?.map((b) => `${b.brand.nama_brand} (${b.brand.jenis_brand})`).join(", ") ||
Â  Â  Â  "Tidak ada brand";

Â  Â  const popupContent = `
Â  Â  Â  <b>${toko.nama_toko}</b><br>
Â  Â  Â  ${toko.alamat}<br>
Â  Â  Â  <i>Brand: ${brandList}</i>
Â  Â  `;
Â  Â  marker.bindPopup(popupContent);
Â  });
}


// ðŸ”¹ Jalankan semuanya
document.addEventListener("DOMContentLoaded", () => {
Â  addMap();
Â  loadMarkers(); // tampilkan semua marker dulu
Â  initBrandDropdown(); // aktifkan filter dropdown
});